---
description: 
globs: 
alwaysApply: true
---
# Development Rules

This document outlines the development rules and guidelines for the pyramid-mcp project. Following these rules ensures code quality, maintainability, and effective collaboration.

## Core Development Principles

### 1. Plan Before Coding ⭐
**ALWAYS plan before writing any code.**

- **Think first, code second**: Before touching any code, take time to understand the problem and design the solution
- **Create a clear plan**: Write down what you're going to do, how you're going to do it, and what the expected outcome is
- **Consider edge cases**: Think through potential issues and how to handle them
- **Review existing code**: Understand how your changes fit into the existing codebase
- **Break down complex tasks**: Split large features into smaller, manageable pieces

### 2. Task Management with Planning Files ⭐
**ALWAYS maintain planning files to track what we did.**

- **Organized structure**: Use `planning/` directory for all planning files
- **Active vs Backlog**: Use `planning/general.md` for CURRENT tasks being worked on, `planning/backlog.md` for planned future tasks
- **Task Flow**: Move tasks from `planning/backlog.md` → `planning/general.md` → `planning/done.md` as they progress
- **Focus Management**: Keep `planning/general.md` focused (max 1-3 active task groups)
- **Create/update files**: Before starting any work, document what you plan to do in the appropriate planning file
- **Track progress**: Update the files as you complete tasks
- **Document decisions**: Record important decisions and why they were made
- **Include completion status**: Mark tasks as TODO, IN PROGRESS, DONE, or BLOCKED
- **Reference issues/PRs**: Link to relevant GitHub issues or pull requests

## Code Quality Standards

### Pre-Development Checklist
Before starting any development work:

- [ ] Read and understand the requirement
- [ ] Create or update appropriate planning file with your planned work
- [ ] Add new tasks to `planning/backlog.md`, move to `planning/general.md` when starting active work
- [ ] Check existing issues and PRs for related work
- [ ] Plan your approach and get feedback if needed
- [ ] Ensure your development environment is set up (`make install`)
- [ ] **Plan test strategy**: Identify what tests need to be written/updated

### Development Workflow

1. **Branch Management**
   ```bash
   git checkout -b feature/descriptive-name
   # or
   git checkout -b bugfix/issue-description
   ```

2. **Code Development**
   - Follow PEP 8 style guidelines
   - Write clear, self-documenting code
   - Add docstrings to all functions and classes
   - Include type hints where appropriate

3. **Testing Requirements**
   - Write tests for all new functionality
   - Ensure existing tests pass: `make test`
   - Run full test suite: `tox`
   - Aim for high test coverage
   - never use class base testcase
   - avoid mocking, only use mock as a last resource
   - we can use pytest responses fixture.

4. **Test Validation Before Task Completion ⭐**
   **NEVER mark a task as DONE without running and verifying tests pass.**
   
   - **Always run tests**: Execute relevant test suites before marking tasks complete
   - **Fix failing tests**: Address any test failures before task completion
   - **Verify no regressions**: Run existing test suites to ensure no breaking changes
   - **Update planning files**: Only mark tasks as DONE after successful test validation
   - **Document test results**: Include test pass/fail status in planning files
   
   ```bash
   # Required before marking any task as DONE
   python -m pytest tests/test_relevant_module.py -v  # New functionality tests
   python -m pytest tests/test_existing_module.py -v  # Regression tests
   make test  # Full test suite (when appropriate)
   ```

5. **Code Quality Checks**
   ```bash
   make check  # Run formatters and linters
   ```

### Documentation Standards

- **Docstrings**: Use Google-style docstrings for all public functions and classes
- **Comments**: Write comments for complex logic, not obvious code
- **README updates**: Update README.md if adding new features or changing setup
- **Type hints**: Use type hints for function parameters and return values

### Commit Standards

- **Commit messages**: Use clear, descriptive commit messages
- **Atomic commits**: Each commit should represent one logical change
- **Pre-commit hooks**: Let pre-commit hooks format your code automatically

Example commit message format:
```
feat: add user authentication system

- Implement JWT token authentication
- Add user login/logout endpoints
- Include password hashing utilities
- Add authentication middleware

Closes #123
```

## Pull Request Guidelines

### Before Creating a PR

- [ ] Update appropriate planning file with completed work
- [ ] **All tests pass locally** (new functionality + regression tests)
- [ ] **Test results documented** in planning files
- [ ] Code quality checks pass (`make check`)
- [ ] Documentation is updated if needed
- [ ] Commit messages are clear and descriptive

### PR Requirements

1. **Title**: Clear, descriptive title
2. **Description**: 
   - What was changed and why
   - Link to related issues
   - Any breaking changes
   - Screenshots if UI changes
3. **Testing**: Describe how the changes were tested
4. **Checklist**: Include a checklist of completed items

### PR Template
```markdown
## Description
Brief description of changes

## Related Issues
Closes #123

## Changes Made
- [ ] Feature/fix 1
- [ ] Feature/fix 2

## Testing
- [ ] Unit tests pass
- [ ] Manual testing completed
- [ ] Edge cases considered

## Documentation
- [ ] Code is documented
- [ ] README updated if needed
- [ ] Planning files updated
```

## File Organization

### Required Files for Each Feature/Bug Fix

1. **Planning files** - Track what you're doing and have done in `planning/` directory
2. **Tests** - In the `tests/` directory  
3. **Documentation** - Update relevant docs

### Planning File Structure

The `planning/` directory contains all task tracking and planning files:

- **`planning/general.md`** - CURRENT/ACTIVE tasks being worked on right now (max 1-3 task groups)
- **`planning/backlog.md`** - PLANNED future tasks, prioritized and ready for development
- **`planning/done.md`** - COMPLETED project tasks for historical reference
- **`planning/[feature-name].md`** - Feature-specific planning and tasks
- **`planning/feature-template.md`** - Template for creating new feature files
- **`planning/README.md`** - Documentation for the planning system

### When to Use Which Planning File

**Use `planning/general.md` for:**
- CURRENT tasks actively being worked on  
- IN PROGRESS development work
- Immediate priority tasks
- Keep focused (max 1-3 active task groups)

**Use `planning/backlog.md` for:**
- PLANNED future tasks and features
- TODO tasks not yet started
- Prioritized development pipeline
- Feature requirements and planning

**Move to `planning/done.md` when:**
- Tasks are marked as DONE ✅
- **Implementation is complete AND all tests pass**
- **Test results are documented in planning files**
- Work is ready for archival reference

**Create `planning/[feature-name].md` for:**
- Features taking more than 1 day
- Complex features with multiple tasks
- Features requiring team coordination
- Features with dependencies or special requirements

### Planning File Template

See `planning/feature-template.md` for the complete template, or use this basic structure:

```markdown
### [YYYY-MM-DD] Task Description

**Status**: TODO | IN PROGRESS | DONE | BLOCKED
**Assigned**: Your Name
**Estimated Time**: X hours
**Related Issue**: #123

#### Plan
- [ ] Task 1: Description
- [ ] Task 2: Description
- [ ] Task 3: Description

#### Progress
- [x] Completed task with notes
- [ ] Current task
- [ ] Future task

#### Decisions Made
- Decision 1: Reasoning
- Decision 2: Reasoning

#### Blockers/Issues
- Issue 1: Description and resolution plan
```

## Dependency Management and Library Usage ⭐

### Core Dependency Tools

#### Poetry - Primary Dependency Manager
**ALWAYS use Poetry for dependency management.**

- **Exclusive use**: Poetry is the ONLY allowed dependency manager
- **No mixing**: Never use pip, pipenv, conda, or other tools alongside Poetry
- **Lock file**: Always commit `poetry.lock` to ensure reproducible builds
- **Version constraints**: Use semantic versioning with appropriate constraints

```bash
# Adding dependencies
poetry add requests              # Production dependency
poetry add --group dev pytest   # Development dependency
poetry add --group docs mkdocs  # Documentation dependency

# Updating dependencies
poetry update                    # Update all dependencies
poetry update requests          # Update specific package
poetry show --outdated         # Check for outdated packages
```

#### Poetry Groups Organization
Organize dependencies into clear groups:

```toml
[tool.poetry.dependencies]
python = ">=3.9,<4.0"
# Core runtime dependencies only

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
mypy = "^0.981"
pre-commit = "^2.20.0"
tox = "^3.25.1"
black = "^22.0.0"
ruff = "^0.1.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocstrings = "^0.29.1"
mkdocstrings-python = "^1.16.10"

[tool.poetry.group.test.dependencies]
# Additional test-only dependencies if needed
```

### Testing Framework

#### pytest - Primary Test Runner
**ALWAYS use pytest for all testing needs.**

- **Exclusive testing**: pytest is the ONLY allowed test framework
- **No alternatives**: Never use unittest, nose, or other test frameworks
- **Configuration**: Use `pyproject.toml` for pytest configuration
- **Coverage**: Always use pytest-cov for coverage reporting

```toml
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--cov=pyramid_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
```

#### Testing Best Practices
- **File structure**: Mirror source structure in `tests/` directory
- **Test naming**: Use descriptive test names starting with `test_`
- **Fixtures**: Use pytest fixtures for reusable test setup
- **Coverage**: Maintain minimum 80% test coverage
- **Markers**: Use markers to categorize tests

```bash
# Running tests
poetry run pytest                    # All tests
poetry run pytest tests/unit/       # Unit tests only
poetry run pytest -m "not slow"     # Skip slow tests
poetry run pytest --cov-report=html # Generate HTML coverage report
```


#### Core Testing Principles

##### ⚠️ CRITICAL: NO CONDITIONAL LOGIC IN TESTS
**NEVER use conditional logic in tests** - This is a STRICT PROHIBITION:

- **❌ NO `if` statements** - No `if condition:` or `if/else` blocks
- **❌ NO `try/except` blocks** - No exception handling in tests
- **❌ NO loops** - No `for`, `while`, or list comprehensions
- **❌ NO ternary operators** - No `value if condition else other_value`

```python
# ❌ FORBIDDEN - Never do this in tests
def test_bad_example():
    response = make_request()
    if response.status_code == 200:
        assert "success" in response.json
    else:
        assert "error" in response.json

# ✅ CORRECT - Write separate focused tests
def test_successful_request_returns_success():
    response = make_successful_request()
    assert response.status_code == 200
    assert "success" in response.json

def test_failed_request_returns_error():
    response = make_failed_request()
    assert response.status_code == 400
    assert "error" in response.json
```

**Why this rule exists:**
- Tests should be predictable and deterministic
- Each test should verify exactly one behavior
- Conditional logic makes tests complex and harder to debug
- Split complex scenarios into multiple focused tests

**One test, one purpose** - Each test should verify exactly one behavior.

**Simple assertions** - Test what should happen, not what shouldn't happen.

**Use descriptive test names** - Name should describe the scenario and expected outcome.

**Use fixtures for setup** - Don't create test data inside test functions. The fixture should live at conftest.py except for the fixture that setup the pyramid. If the test setup a pyramid please keep the fixture at the same file.

**Check the fixtures** - Before create a new fixture check if a similar fixture exists.


### Documentation Framework

#### MkDocs - Primary Documentation Tool
**ALWAYS use MkDocs for documentation generation.**

- **Exclusive docs**: MkDocs is the ONLY allowed documentation generator
- **No alternatives**: Never use Sphinx, GitBook, or other doc tools
- **Configuration**: Use `mkdocs.yml` for all documentation settings
- **Extensions**: Use mkdocstrings for API documentation from docstrings

```yaml
# mkdocs.yml structure
site_name: Pyramid MCP
repo_url: https://github.com/your-org/pyramid-mcp
docs_dir: docs
site_dir: site

theme:
  name: material

plugins:
  - search
  - mkdocstrings:
      handlers:
        python:
          options:
            docstring_style: google
```

### Cornice Schema Validation

#### ⭐ CRITICAL: Marshmallow Schema Validation with Cornice
**When using Marshmallow schemas with Cornice, ALWAYS use the proper validator.**

**Required Pattern:**
```python
from cornice import Service
from cornice.validators import marshmallow_body_validator
from marshmallow import Schema, fields

class CreateUserSchema(Schema):
    name = fields.Str(required=True)
    email = fields.Email(required=True)

@service.post(schema=CreateUserSchema(), validators=(marshmallow_body_validator,))
def create_user(request):
    # Access validated data via request.validated
    name = request.validated['name']
    email = request.validated['email']
    return {"user": "created"}
```

**Key Requirements:**
- **Import validator**: `from cornice.validators import marshmallow_body_validator`
- **Set schema AND validators**: Both `schema=` and `validators=` parameters required
- **Access via request.validated**: Validated data available in `request.validated`
- **Proper tuple syntax**: `validators=(marshmallow_body_validator,)` with trailing comma

**Common Mistake:**
```python
# ❌ WRONG - Schema alone is not enough
@service.post(schema=CreateUserSchema())
def create_user(request):
    # This will NOT validate the request
    pass

# ✅ CORRECT - Include the validator
@service.post(schema=CreateUserSchema(), validators=(marshmallow_body_validator,))
def create_user(request):
    # Now validation works correctly
    pass
```

### Forbidden Libraries and Patterns

#### ⚠️ NEVER USE: Pydantic
**Pydantic is STRICTLY FORBIDDEN in this project.**

- **No Pydantic**: Never add pydantic as a dependency
- **No BaseModel**: Don't use Pydantic's BaseModel or validation
- **Alternatives**: Use dataclasses, TypedDict, or attrs instead
- **Reason**: Architectural decision to avoid dependency complexity

```python
# ❌ FORBIDDEN - Never do this
from pydantic import BaseModel

class User(BaseModel):
    name: str
    age: int

# ✅ ALLOWED - Use dataclasses instead
from dataclasses import dataclass
from typing import TypedDict

@dataclass
class User:
    name: str
    age: int

# Or TypedDict for simple structures
class UserDict(TypedDict):
    name: str
    age: int
```

### Dependency Addition Guidelines

#### Use Poetry Add Command (Not Manual Editing)
**ALWAYS use `poetry add` instead of manually editing pyproject.toml.**

- **Correct approach**: Use `poetry add` to add dependencies
- **Wrong approach**: Never manually edit `[tool.poetry.dependencies]` sections
- **Why**: Poetry handles version resolution, conflict detection, and lock file updates automatically

```bash
# ✅ CORRECT - Use poetry add commands
poetry add requests                    # Production dependency
poetry add --group dev logassert      # Development dependency
poetry add --group docs mkdocs        # Documentation dependency

# ❌ WRONG - Never edit pyproject.toml directly
# Don't manually add lines like: requests = "^2.31.0"
```

#### Before Adding Any Dependency
**ALWAYS follow this checklist before adding new dependencies:**

- [ ] Check if functionality exists in Python standard library
- [ ] Verify the library is actively maintained (recent commits/releases)
- [ ] Check license compatibility with project
- [ ] Ensure it's not on the forbidden list
- [ ] Consider the size and complexity it adds
- [ ] **Use `poetry add` command** (never edit pyproject.toml manually)
- [ ] Document the decision in appropriate planning file

#### Preferred Libraries by Category

**Web Frameworks:**
- ✅ Pyramid (primary framework)
- ❌ FastAPI (if needed for specific APIs)
- ❌ Django (too heavy for our use case)
- ❌ Flask (prefer Pyramid)

**Data Handling:**
- ✅ dataclasses (Python standard library)
- ✅ attrs (for complex data structures)
- ✅ TypedDict (for simple dictionaries)
- ❌ Pydantic (explicitly forbidden)

**Testing:**
- ✅ pytest (required)
- ✅ pytest-cov (for coverage)
- ✅ pytest-mock (for mocking)
- ❌ unittest (use pytest instead)
- ❌ nose (deprecated)

**HTTP Clients:**
- ✅ httpx (async-first)
- ✅ requests (synchronous)
- ❌ urllib3 directly (use higher-level clients)

**Date/Time:**
- ✅ datetime (Python standard library)
- ✅ dateutil (for parsing)
- ❌ arrow (prefer standard library)
- ❌ pendulum (unnecessary complexity)

#### Version Constraints Best Practices

```toml
# Good version constraints
requests = "^2.31.0"        # Allow compatible updates
pytest = "^7.2.0"          # Major version locked
python = ">=3.9,<4.0"      # Clear range

# Avoid these patterns
requests = "*"              # Too permissive
pytest = "==7.2.0"         # Too restrictive (blocks security updates)
python = "^3.9"            # Could allow Python 4.x unexpectedly
```

### Development Environment

#### Setup
```bash
make install          # Install dependencies and pre-commit hooks
poetry shell         # Activate virtual environment
```

#### Daily Workflow
```bash
make check          # Format and lint code
make test           # Run tests
tox                 # Test across Python versions (optional locally)
```

#### Dependency Management Commands
```bash
# Check dependencies
poetry show --tree          # Show dependency tree
poetry show --outdated      # Check for updates
poetry check                # Validate pyproject.toml

# Update dependencies
poetry update               # Update all within constraints
poetry update requests      # Update specific package
poetry lock --no-update     # Regenerate lock file

# Audit and security
poetry audit                # Check for known vulnerabilities
```

## Review Process

### Self-Review Checklist
Before requesting review:

- [ ] Code follows project conventions
- [ ] All tests pass
- [ ] Documentation is complete
- [ ] Planning files are updated
- [ ] No debugging code left behind
- [ ] Error handling is appropriate
- [ ] Performance implications considered

### Code Review Guidelines

**For Reviewers:**
- Focus on design, logic, and maintainability
- Suggest improvements, don't just point out problems
- Be constructive and respectful
- Check that planning files reflect the work done

**For Authors:**
- Be open to feedback
- Explain complex decisions in comments or PR description
- Update planning files based on review feedback if scope changes

## Emergency/Hotfix Process

Even for urgent fixes:

1. **Still plan first** - Even 5 minutes of planning can prevent bigger issues
2. **Update planning files** - Document what you're fixing in `planning/general.md` for active work (move to `planning/done.md` when complete)
3. **Create hotfix branch**: `hotfix/critical-issue-description`
4. **Minimal, focused changes** - Fix only what's necessary
5. **Fast-track review** - Get quick review but don't skip testing

## Tools and Resources

### Essential Commands

#### Poetry Commands
```bash
# Environment management
poetry install              # Install all dependencies
poetry shell               # Activate virtual environment
poetry env info            # Show virtual environment info

# Dependency management
poetry add package         # Add production dependency
poetry add --group dev pkg # Add development dependency
poetry remove package      # Remove dependency
poetry update             # Update all dependencies
poetry show --tree        # Show dependency tree
poetry show --outdated    # Check for updates
poetry check              # Validate pyproject.toml
poetry audit              # Security audit
```

#### Testing Commands
```bash
# Basic testing
poetry run pytest                    # Run all tests
poetry run pytest --cov            # Run with coverage
poetry run pytest -v               # Verbose output
poetry run pytest tests/unit/      # Run specific directory
poetry run pytest -k "test_name"   # Run tests matching pattern
poetry run pytest -m "not slow"    # Skip slow tests

# Coverage reporting
poetry run pytest --cov-report=html    # HTML coverage report
poetry run pytest --cov-report=term    # Terminal coverage report
poetry run pytest --cov-fail-under=80  # Fail if coverage below 80%
```

#### Documentation Commands
```bash
# MkDocs commands
poetry run mkdocs serve     # Serve docs locally
poetry run mkdocs build     # Build static docs
poetry run mkdocs gh-deploy # Deploy to GitHub Pages
```

#### Development Workflow Commands
```bash
make help           # Show all available make commands
make install        # Full project setup
make check          # Format and lint code
make test           # Run full test suite
make docs           # Build documentation
tox                 # Test across Python versions
```

### Pre-commit Hooks
The project uses pre-commit hooks to automatically:
- Format code with black
- Sort imports with isort
- Lint with flake8
- Run other quality checks

## Pyramid-Specific Development Practices

### 🔐 Pyramid Security Architecture 

#### Pyramid Security vs Middleware Approach

**IMPORTANT**: Pyramid does **NOT** use middleware for security. Unlike frameworks like Django or Flask that often use middleware layers, Pyramid has a built-in, sophisticated security system that integrates deeply with the framework.

#### The Pyramid Way: Security Policies & Context Factories

Pyramid uses a declarative security system based on:

1. **Security Policy**: Defines how authentication and authorization work
2. **Context Factories**: Create security contexts that define permissions for routes
3. **ACLs (Access Control Lists)**: Declarative permission definitions
4. **View Permissions**: Views declare required permissions, security is enforced automatically

```python
# ❌ WRONG - Middleware approach (NOT used in Pyramid)
def auth_middleware(handler, registry):
    def middleware(request):
        # This approach is NOT the Pyramid way
        user = get_user_from_request(request)
        request._authenticated_user = user
        return handler(request)
    return middleware

# ✅ CORRECT - Pyramid Security Policy approach
class CustomSecurityPolicy:
    def identity(self, request):
        """Return the authenticated user object."""
        return getattr(request, '_authenticated_user', None)
    
    def authenticated_userid(self, request):
        """Return the authenticated user ID."""
        user = self.identity(request)
        return user['user_id'] if user else None
    
    def effective_principals(self, request):
        """Return effective principals for the current user."""
        principals = [Everyone]
        user = self.identity(request)
        if user:
            principals.extend([
                Authenticated,
                f"user:{user['username']}",
                f"role:{user['role']}"
            ])
        return principals
    
    def permits(self, request, context, permission):
        """Check if current user has permission on context."""
        principals = self.effective_principals(request)
        return self.acl_helper.permits(context, principals, permission)
```

#### Context Factories: The Heart of Pyramid Security

Context factories create security contexts that define who can access what:

```python
# Context factory returns a context object with ACL
def admin_context_factory(request):
    return AdminContext()

# Context class defines permissions via ACL
class AdminContext:
    def __acl__(self):
        return [
            (Allow, 'role:admin', ALL_PERMISSIONS),
            (Deny, Everyone, ALL_PERMISSIONS),
        ]

# Route uses the context factory  
config.add_route('admin_area', '/admin', factory=admin_context_factory)

# View declares permission requirement
@view_config(route_name='admin_area', permission='view')
def admin_view(request):
    # Security is automatically enforced by Pyramid
    return {'message': 'Admin content'}
```

#### pyramid-mcp Security Integration

Our pyramid-mcp integration respects Pyramid's security system by:

**1. Security Policy Integration**

```python
# pyramid_mcp uses Pyramid's security policy
policy = pyramid_request.registry.queryUtility(ISecurityPolicy)
if policy.permits(pyramid_request, context, tool.permission):
    # Execute tool
    result = tool.handler(**tool_args)
else:
    # Access denied
    raise HTTPForbidden("Access denied")
```

**2. Context Factory Support**

MCP endpoints can use different context factories for different security levels:

```python
# Default MCP endpoint - basic security
config.include('pyramid_mcp')  # Creates /mcp route

# Secure MCP endpoint - requires authentication
config.add_route('mcp_secure', '/mcp-secure', factory=authenticated_context_factory)
config.add_view(
    pyramid_mcp._handle_mcp_http,
    route_name='mcp_secure',
    request_method='POST',
    renderer='json'
)

# Admin MCP endpoint - requires admin role
config.add_route('mcp_admin', '/mcp-admin', factory=admin_context_factory)
config.add_view(
    pyramid_mcp._handle_mcp_http,
    route_name='mcp_admin', 
    request_method='POST',
    renderer='json'
)
```

**3. Tool-Level Permissions**

MCP tools can specify permission requirements:

```python
@tool(
    name="admin_tool",
    description="Admin-only tool",
    permission="admin_access"  # Checked against context ACL
)
def admin_tool(action: str) -> str:
    return f"Admin action: {action}"
```

### 🧪 Testing Pyramid Security

#### Test Security Policies

```python
import pytest
from pyramid.testing import DummyRequest
from pyramid.authorization import Everyone, Authenticated

class MockSecurityPolicy:
    def __init__(self):
        self._current_user = None
    
    def set_user(self, username, principals=None):
        """Set current user for testing."""
        self._current_user = {
            'username': username,
            'principals': principals or []
        }
    
    def effective_principals(self, request):
        if not self._current_user:
            return [Everyone]
        return [Everyone, Authenticated] + self._current_user['principals']

@pytest.fixture
def mock_security_policy():
    return MockSecurityPolicy()
```

#### Test Context Factories

```python
def test_admin_context_denies_regular_users(mock_security_policy):
    """Test that admin context properly denies non-admin users."""
    # Set up regular user
    mock_security_policy.set_user('alice', ['role:user'])
    
    # Create admin context
    context = AdminContext()
    request = DummyRequest()
    
    # Should deny access
    assert not mock_security_policy.permits(request, context, 'view')

def test_admin_context_allows_admin_users(mock_security_policy):
    """Test that admin context allows admin users."""
    # Set up admin user
    mock_security_policy.set_user('bob', ['role:admin'])
    
    # Create admin context
    context = AdminContext()
    request = DummyRequest()
    
    # Should allow access
    assert mock_security_policy.permits(request, context, 'view')
```

#### Test MCP Security Integration

```python
def test_mcp_respects_context_factory_security():
    """Test that MCP tools respect Pyramid's context factory security."""
    config = Configurator()
    config.set_security_policy(MockSecurityPolicy())
    
    # Add secure MCP route
    config.add_route('mcp_secure', '/mcp-secure', factory=authenticated_context_factory)
    config.include('pyramid_mcp')
    
    app = TestApp(config.make_wsgi_app())
    
    # Test anonymous access (should be denied)
    response = app.post_json('/mcp-secure', {
        'jsonrpc': '2.0',
        'id': 1,
        'method': 'tools/call',
        'params': {'name': 'secure_tool', 'arguments': {}}
    }, expect_errors=True)
    
    assert response.status_code == 403  # Forbidden
```

### 🏗️ Security Architecture Patterns

#### Pattern 1: Public, Authenticated, Admin Contexts

```python
# Three-tier security model
class PublicContext:
    __acl__ = [(Allow, Everyone, 'view')]

class AuthenticatedContext:
    __acl__ = [
        (Allow, Authenticated, 'view'),
        (Allow, Authenticated, 'edit'), 
        (Allow, 'role:admin', ALL_PERMISSIONS),
    ]

class AdminContext:
    __acl__ = [
        (Allow, 'role:admin', ALL_PERMISSIONS),
        (Deny, Everyone, ALL_PERMISSIONS),
    ]
```

#### Pattern 2: Resource Ownership

```python
class UserOwnedContext:
    def __init__(self, owner_username=None):
        self.owner_username = owner_username
    
    def __acl__(self):
        acl = [
            (Allow, Everyone, 'view'),  # Public read
            (Allow, 'role:admin', ALL_PERMISSIONS),  # Admin full access
        ]
        
        # Owner can edit their own resources
        if self.owner_username:
            acl.append((Allow, f'user:{self.owner_username}', 'edit'))
        
        return acl

# Usage in route factory
def user_profile_factory(request):
    username = request.matchdict.get('username')
    return UserOwnedContext(owner_username=username)
```

#### Pattern 3: Dynamic Permissions

```python
class DynamicContext:
    def __init__(self, request):
        self.request = request
        self.operation = request.json_body.get('operation', 'basic')
    
    def __acl__(self):
        acl = [(Allow, Authenticated, 'basic')]
        
        # Advanced operations require admin
        if self.operation in ['advanced', 'admin']:
            acl.append((Allow, 'role:admin', 'advanced'))
        else:
            acl.append((Allow, Authenticated, 'advanced'))
        
        return acl
```

### 📋 Security Best Practices

#### 1. Always Use Context Factories

```python
# ✅ GOOD - Declarative security via context factory
config.add_route('secure_endpoint', '/secure', factory=authenticated_context_factory)

@view_config(route_name='secure_endpoint', permission='view')
def secure_view(request):
    return {'data': 'secure content'}

# ❌ BAD - Imperative security checks in view
@view_config(route_name='insecure_endpoint')
def insecure_view(request):
    if not request.authenticated_userid:
        raise HTTPUnauthorized()  # Security logic in view
    return {'data': 'content'}
```

#### 2. Use Specific Permissions

```python
# ✅ GOOD - Specific, meaningful permissions
class DocumentContext:
    __acl__ = [
        (Allow, Everyone, 'read'),
        (Allow, Authenticated, 'comment'),
        (Allow, 'role:editor', 'edit'),
        (Allow, 'role:admin', 'delete'),
    ]

# ❌ BAD - Generic permissions
class BadContext:
    __acl__ = [
        (Allow, Everyone, 'view'),
        (Allow, Authenticated, 'view'),  # Too generic
    ]
```

#### 3. Secure by Default

```python
# ✅ GOOD - Deny by default, explicit allow
class SecureContext:
    __acl__ = [
        (Allow, 'role:admin', 'manage'),
        (Deny, Everyone, ALL_PERMISSIONS),  # Explicit deny
    ]

# ❌ BAD - Allow by default
class InsecureContext:
    __acl__ = [
        (Allow, Everyone, ALL_PERMISSIONS),  # Too permissive
    ]
```

#### 4. Test Security Boundaries

```python
def test_security_boundaries():
    """Test that security works correctly at boundaries."""
    # Test anonymous access (should be denied)
    # Test authenticated access (should work)
    # Test wrong role access (should be denied)
    # Test privilege escalation attempts (should fail)
    pass
```

### 🐛 Common Security Pitfalls

#### 1. Using Middleware Instead of Security Policy

```python
# ❌ WRONG - Don't use middleware for security in Pyramid
config.add_tween('myapp.auth_middleware_factory')

# ✅ RIGHT - Use security policy
config.set_security_policy(CustomSecurityPolicy())
```

#### 2. Forgetting Context Factories

```python
# ❌ WRONG - No security context
config.add_route('admin', '/admin')  

# ✅ RIGHT - With security context
config.add_route('admin', '/admin', factory=admin_context_factory)
```

#### 3. Imperative Security in Views

```python
# ❌ WRONG - Security logic in view
@view_config(route_name='admin')
def admin_view(request):
    if not request.has_permission('admin'):
        raise HTTPForbidden()
    return {'data': 'admin'}

# ✅ RIGHT - Declarative security
@view_config(route_name='admin', permission='admin')
def admin_view(request):
    return {'data': 'admin'}
```

### 🔄 Migration from Middleware

If you're coming from a middleware-based security system:

#### Before (Middleware)

```python
# Middleware approach - NOT Pyramid style
def auth_middleware(get_response):
    def middleware(request):
        user = authenticate(request)
        request.user = user
        if not user and needs_auth(request):
            return HttpResponseForbidden()
        return get_response(request)
    return middleware
```

#### After (Pyramid)

```python
# Pyramid approach - Security Policy + Context Factory
class MySecurityPolicy:
    def identity(self, request):
        return authenticate(request)
    
    def effective_principals(self, request):
        user = self.identity(request)
        principals = [Everyone]
        if user:
            principals.append(Authenticated)
            principals.extend(user.roles)
        return principals

class AuthenticatedContext:
    __acl__ = [(Allow, Authenticated, 'view')]

# Configuration
config.set_security_policy(MySecurityPolicy())
config.add_route('protected', '/protected', factory=lambda r: AuthenticatedContext())
```

### 📚 Additional Resources

- [Pyramid Security Documentation](mdc:https:/docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html)
- [ACL Tutorial](mdc:https:/docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/authorization.html)  
- [Security Best Practices](mdc:https:/docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html#security-best-practices)

---

## Questions or Issues?

- Check existing issues first
- Create detailed issue reports
- Ask for help early rather than struggling alone
- Update planning files when blocked with explanation

---

**Remember**: These rules exist to make our development process smoother and our code better. When in doubt, plan first and document what you're doing in the appropriate planning file! 