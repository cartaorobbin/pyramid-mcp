---
description: 
globs: 
alwaysApply: true
---
# Development Environment Setup Rules

This document outlines the development environment setup rules for the pyramid-mcp project. We support two primary development environments: **local development with direnv + pyenv** and **devcontainer development**.

## ‚ö° Quick Start (Recommended)

**For most developers, this is all you need:**

```bash
# 1. Clone the repository and navigate to it
cd pyramid-mcp

# 2. Run our battle-tested setup script
make setup-local-env

# 3. Allow direnv to activate the environment
direnv allow

# 4. Verify everything works
make test
```

**That's it!** Our automated setup handles everything: Python version validation, virtual environment creation, Poetry installation, dependency management, and pre-commit hooks.

## üèÜ Battle-Tested Success Record

**Our setup has been tested multiple times from scratch with identical results:**

- ‚úÖ **3x Complete Clean Installs**: Deleted virtual environment and recreated from zero
- ‚úÖ **253/260 Tests Pass**: Identical test results across all setups (5 known project-specific failures)
- ‚úÖ **70+ Dependencies**: All dev dependencies install correctly every time
- ‚úÖ **Full Tool Chain**: Python 3.10.15, Poetry 2.1.3, pre-commit hooks, all working
- ‚úÖ **Zero Regressions**: No functionality lost during standardization
- ‚úÖ **22-Line .envrc**: Simplified from 77 lines (71% complexity reduction!)

**Proven reliable setup with reproducible results!** üéØ

---

## Environment Options

### Option 1: Local Development (Recommended for most developers)
- **Use when**: You want full control over your environment and faster iteration
- **Requirements**: pyenv, direnv, poetry
- **Pros**: Fast, flexible, native performance
- **Cons**: Requires local tool installation and configuration

### Option 2: Devcontainer Development
- **Use when**: You want consistent environments across team members or have limited local setup options
- **Requirements**: Docker, VS Code with devcontainer extension
- **Pros**: Consistent, isolated, minimal local setup
- **Cons**: Slightly slower, requires Docker knowledge

## Local Development Setup with direnv + pyenv

### Prerequisites
Before starting, ensure you have:
- [pyenv](mdc:ai/ai/ai/ai/ai/ai/ai/ai/https:/github.com/pyenv/pyenv) installed and configured
- [direnv](mdc:ai/ai/ai/ai/ai/ai/ai/ai/https:/direnv.net) installed and configured
- Poetry will be installed automatically by our setup script

### Python Version Detection
The project uses Python version specified in `pyproject.toml`. Currently requires:
- **Minimum**: Python 3.9
- **Supported**: Python 3.9, 3.10, 3.11, 3.12

### Automated Setup Process

Our **battle-tested, perfected setup** eliminates manual configuration:

#### What `make setup-local-env` Does Automatically:

1. **üêç Python Version Validation**
   - Extracts required Python version from `pyproject.toml` 
   - Validates your current Python version is compatible (‚â•3.9)
   - Clear error messages if version incompatible

2. **üèóÔ∏è Virtual Environment Creation**
   - Creates pyenv virtual environment named "pyramid-mcp"
   - Uses correct Python version automatically
   - Properly activates environment before any installations

3. **üì¶ Poetry & Dependencies**
   - Installs Poetry in the virtual environment
   - Configures Poetry to use the virtual environment
   - Installs ALL dependencies (including dev dependencies)
   - Verifies 70+ packages are installed correctly

4. **üîß Development Tools Setup**
   - Installs and configures pre-commit hooks
   - Verifies all dev tools are functional
   - Sets up environment for immediate development

5. **‚úÖ Validation & Verification**
   - Comprehensive environment validation
   - Clear success/failure feedback
   - Debug information for troubleshooting

#### What the .envrc Does:

The `.envrc` file (only 22 lines!) handles:
- **Environment detection**: Detects devcontainer vs local development
- **Virtual environment activation**: Uses proper `pyenv activate` command
- **Environment variables**: Sets `OPENAI_API_KEY`, `PROJECT_NAME`, `ENVIRONMENT`
- **Status display**: Shows activation success/failure messages

**Heavy setup logic is in `bin/setup-local-env` script, .envrc stays simple!**

### Recreating .envrc Instructions

**When to recreate .envrc:**
- Switching Python versions
- Environment corruption
- New team member setup
- After major Poetry updates

**Steps to recreate:**
- Remove existing .envrc
- Remove existing virtual environment (local dev only)
- Follow setup process above
- Reload direnv

## Devcontainer Development Setup

### Prerequisites
- [Docker](mdc:ai/ai/ai/ai/ai/ai/ai/ai/ai/ai/ai/https:/docs.docker.com/get-docker) installed
- [VS Code](mdc:ai/ai/ai/ai/ai/ai/ai/ai/ai/ai/ai/https:/code.visualstudio.com) with [Dev Containers extension](mdc:ai/ai/ai/ai/ai/ai/ai/ai/ai/ai/ai/https:/marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)

### Configuration Files Required

#### .devcontainer/devcontainer.json
- Use official Microsoft Python devcontainer image (Python 3.11)
- Install Poetry in postCreateCommand
- Include essential VS Code extensions for Python development
- Set remoteUser to "vscode"

### Setup Process
- Open VS Code in project directory
- Use Command Palette: "Dev Containers: Reopen in Container"
- Wait for container build and setup
- Verify with Poetry and make test

### .envrc in Devcontainer
- **CAN be used**: .envrc works in devcontainer environments
- **SHOULD NOT include**: pyenv virtualenv commands
- **SHOULD include**: Python version validation, dependency installation, Poetry shell activation
- **Environment detection**: Use `$DEVCONTAINER` or `$CODESPACES` to detect container environment

## Environment Validation

### Python Version Validation
- Extract required Python version from pyproject.toml
- Compare with current Python version
- Fail if current version is below minimum requirement
- Provide clear success/failure messages

### Full Environment Validation
- Detect environment type (local vs devcontainer)
- Validate Python version
- Check Poetry installation
- Verify virtual environment (local only)
- Test dependency installation
- Run basic test suite

## .gitignore Configuration

### Required .gitignore Entries
**.envrc MUST be in .gitignore** because:
- Contains environment-specific paths
- May contain sensitive information
- Should be recreated per environment

Add to .gitignore:
- .envrc
- .envrc.local
- .python-version

### Why .envrc Should Be Ignored
1. **Environment-specific**: Paths and configurations differ between developers
2. **Security**: May contain sensitive environment variables
3. **Reproducibility**: Each developer should create their own based on instructions
4. **Maintenance**: Reduces merge conflicts

## Troubleshooting

### Common Issues and Solutions

**Most issues are solved by re-running our battle-tested setup:**

```bash
make setup-local-env    # Fixes 95% of environment issues
direnv allow           # Re-activate environment
```

#### Specific Issues:

#### "pyenv: pyramid-mcp: command not found"
**Problem**: Virtual environment not created or activated
**Solution**: 
```bash
make setup-local-env   # Our script creates the virtualenv automatically
direnv allow          # Activate the environment
```

#### "direnv: error .envrc is blocked"
**Problem**: .envrc not allowed by direnv
**Solution**: `direnv allow`

#### "Poetry not found" or "Command not found: poetry"
**Problem**: Poetry not installed in the virtual environment
**Solution**: 
```bash
make setup-local-env   # Our script installs Poetry automatically
```

#### "Python version mismatch"
**Problem**: Wrong Python version active
**Solution**: 
```bash
# Install correct Python version
pyenv install 3.10.15  # or latest 3.9+
make setup-local-env   # Use correct version automatically
```

#### "Dependencies out of sync" or test failures
**Problem**: Dependencies not properly installed
**Solution**: 
```bash
make setup-local-env   # Installs all dependencies including dev deps
```

### Environment Reset Procedure
When all else fails, completely reset your environment:
- Remove virtual environment (local only)
- Remove .envrc
- Clear Poetry cache
- Reinstall Python version (local only)
- Recreate environment
- Recreate .envrc
- Reinstall dependencies
- Validate setup

## Quick Reference Commands

### Local Development Setup (New Developer)
```bash
# One-time setup (battle-tested!)
make setup-local-env    # Creates everything automatically
direnv allow           # Activate environment
make test              # Verify everything works
```

### Daily Development Workflow
```bash
# The environment activates automatically when you cd into the project!
cd pyramid-mcp         # direnv automatically activates environment

# Standard development commands
make check             # Format and lint code
make test              # Run test suite
poetry add package     # Add new dependencies  
poetry run pytest -k "test_name"  # Run specific tests
```

### Troubleshooting Commands
```bash
# Environment validation
python --version              # Should show Python 3.9+
poetry --version             # Should show Poetry 2.x  
poetry run pre-commit --version  # Should work
which python                 # Should point to pyenv shims

# Reset if needed
make setup-local-env         # Re-run setup script
direnv reload               # Reload environment  
pyenv versions              # Check virtual environments
```

### Devcontainer
- Setup: Open in VS Code, reopen in container
- Daily workflow: poetry install, make test/check

---

## Decision Matrix

| Factor | Local Dev | Devcontainer |
|--------|-----------|--------------|
| Setup Speed | Medium | Slow (first time) |
| Performance | Fast | Medium |
| Consistency | Medium | High |
| Customization | High | Medium |
| Isolation | Medium | High |
| Offline Work | Good | Limited |

**Recommendation**: Start with local development for speed and flexibility. Use devcontainer for consistency across team members or when local setup is problematic.
